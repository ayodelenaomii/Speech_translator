<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Speech-to-Speech Translator</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            max-width: 800px;
            width: 100%;
            animation: slideUp 0.8s ease-out;
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
            font-size: 2.5rem;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .status-indicator {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
            padding: 10px;
            border-radius: 10px;
            background: rgba(0, 0, 0, 0.05);
        }

        .status-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .status-online {
            background: #4CAF50;
            animation: pulse 2s infinite;
        }

        .status-offline {
            background: #f44336;
        }

        .status-processing {
            background: #ff9800;
            animation: pulse 1s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .language-section {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }

        .language-group {
            background: rgba(0, 0, 0, 0.05);
            padding: 20px;
            border-radius: 15px;
            transition: transform 0.3s ease;
        }

        .language-group:hover {
            transform: translateY(-5px);
        }

        .language-group h3 {
            color: #333;
            margin-bottom: 15px;
            font-size: 1.2rem;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }

        select, input {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: white;
        }

        select:focus, input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 10px rgba(102, 126, 234, 0.2);
        }

        .control-panel {
            text-align: center;
            margin: 30px 0;
        }

        .record-button {
            background: linear-gradient(45deg, #f44336, #e91e63);
            color: white;
            border: none;
            padding: 20px 40px;
            border-radius: 50px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(244, 67, 54, 0.3);
            position: relative;
            overflow: hidden;
        }

        .record-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(244, 67, 54, 0.4);
        }

        .record-button:active {
            transform: translateY(0);
        }

        .record-button.recording {
            background: linear-gradient(45deg, #ff5722, #ff9800);
            animation: recordPulse 1s infinite;
        }

        @keyframes recordPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .record-button:disabled {
            background: #ccc;
            cursor: not-allowed;
            animation: none;
        }

        .results-section {
            margin-top: 30px;
            background: rgba(0, 0, 0, 0.05);
            padding: 20px;
            border-radius: 15px;
            min-height: 200px;
        }

        .result-item {
            background: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 15px;
            border-left: 4px solid #667eea;
            animation: fadeIn 0.5s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateX(-20px); }
            to { opacity: 1; transform: translateX(0); }
        }

        .result-label {
            font-weight: 600;
            color: #333;
            margin-bottom: 5px;
        }

        .result-text {
            color: #555;
            font-size: 1.1rem;
            line-height: 1.4;
        }

        .audio-controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 20px;
        }

        .audio-button {
            background: linear-gradient(45deg, #4CAF50, #45a049);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
        }

        .audio-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(76, 175, 80, 0.3);
        }

        .audio-button:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        .loading-spinner {
            display: none;
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .error-message {
            background: #ffebee;
            color: #c62828;
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            border-left: 4px solid #f44336;
            display: none;
        }

        .success-message {
            background: #e8f5e8;
            color: #2e7d32;
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            border-left: 4px solid #4CAF50;
            display: none;
        }

        .settings-panel {
            background: rgba(0, 0, 0, 0.05);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 30px;
        }

        .settings-title {
            font-weight: 600;
            margin-bottom: 15px;
            color: #333;
        }

        .settings-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        @media (max-width: 768px) {
            .container {
                padding: 20px;
                margin: 10px;
            }

            .language-section {
                grid-template-columns: 1fr;
                gap: 20px;
            }

            .settings-grid {
                grid-template-columns: 1fr;
            }

            h1 {
                font-size: 2rem;
            }

            .record-button {
                padding: 15px 30px;
                font-size: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Speech-to-Speech Translator</h1>
        
        <div class="status-indicator">
            <div class="status-dot status-online" id="statusDot"></div>
            <span id="statusText">Ready</span>
        </div>

        <div class="settings-panel">
            <div class="settings-title">Audio Settings</div>
            <div class="settings-grid">
                <div class="form-group">
                    <label for="timeout">Listening Timeout (seconds)</label>
                    <input type="number" id="timeout" value="10" min="5" max="30">
                </div>
                <div class="form-group">
                    <label for="phraseLimit">Phrase Time Limit (seconds)</label>
                    <input type="number" id="phraseLimit" value="5" min="3" max="15">
                </div>
            </div>
        </div>

        <div class="language-section">
            <div class="language-group">
                <h3>Source Language</h3>
                <div class="form-group">
                    <label for="sourceType">Language Type</label>
                    <select id="sourceType" onchange="updateSourceLanguages()">
                        <option value="African">African Languages</option>
                        <option value="Others">Other Languages</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="sourceLanguage">Select Language</label>
                    <select id="sourceLanguage">
                        <!-- Options will be populated by JavaScript -->
                    </select>
                </div>
            </div>

            <div class="language-group">
                <h3>Target Language</h3>
                <div class="form-group">
                    <label for="targetType">Language Type</label>
                    <select id="targetType" onchange="updateTargetLanguages()">
                        <option value="African">African Languages</option>
                        <option value="Others">Other Languages</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="targetLanguage">Select Language</label>
                    <select id="targetLanguage">
                        <!-- Options will be populated by JavaScript -->
                    </select>
                </div>
            </div>
        </div>

        <div class="control-panel">
            <button class="record-button" id="recordButton" onclick="toggleRecording()">
                Start Recording
            </button>
            <div class="loading-spinner" id="loadingSpinner"></div>
        </div>

        <div class="error-message" id="errorMessage"></div>
        <div class="success-message" id="successMessage"></div>

        <div class="results-section">
            <h3 style="margin-bottom: 20px; color: #333;">Translation Results</h3>
            <div id="resultsContainer">
                <p style="text-align: center; color: #888; font-style: italic;">
                    Click "Start Recording" to begin translation
                </p>
            </div>
            <div class="audio-controls" id="audioControls" style="display: none;">
                <button class="audio-button" id="playButton" onclick="playTranslatedAudio()">
                    Play Translation
                </button>
                <button class="audio-button" id="downloadButton" onclick="downloadAudio()">
                    Download Audio
                </button>
            </div>
        </div>
    </div>

    <script>
        // Language mappings - matching app.py exactly
        const AFRICAN_LANGUAGES = {
            "yo": "Yoruba",
            "ha": "Hausa",
            "ig": "Igbo",
            "am": "Amharic",
            "sw": "Swahili",
            "zu": "Zulu",
            "xh": "Xhosa",
            "af": "Afrikaans",
            "en": "English"
        };

        const OTHER_LANGUAGES = {
            "en_XX": "English",
            "fr_XX": "French",
            "es_XX": "Spanish",
            "de_DE": "German",
            "it_IT": "Italian",
            "pt_XX": "Portuguese",
            "nl_XX": "Dutch",
            "pl_PL": "Polish",
            "ro_RO": "Romanian",
            "bg_BG": "Bulgarian",
            "fi_FI": "Finnish",
            "sv_SE": "Swedish",
            "no_NO": "Norwegian",
            "ru_RU": "Russian",
            "zh_CN": "Chinese (Simplified)",
            "zh_TW": "Chinese (Traditional)",
            "ja_XX": "Japanese",
            "ko_KR": "Korean",
            "hi_IN": "Hindi",
            "bn_IN": "Bengali",
            "pa_IN": "Punjabi",
            "ur_PK": "Urdu",
            "th_TH": "Thai",
            "vi_VN": "Vietnamese",
            "id_ID": "Indonesian",
            "ms_MY": "Malay"
        };

        let isRecording = false;
        let mediaRecorder = null;
        let audioChunks = [];
        let currentTranslationData = null;

        // Update language dropdowns based on type selection
        function updateSourceLanguages() {
            const sourceType = document.getElementById('sourceType').value;
            const sourceLanguage = document.getElementById('sourceLanguage');
            const languages = sourceType === 'African' ? AFRICAN_LANGUAGES : OTHER_LANGUAGES;
            
            sourceLanguage.innerHTML = '';
            for (const [code, name] of Object.entries(languages)) {
                const option = document.createElement('option');
                option.value = code;
                option.textContent = name;
                sourceLanguage.appendChild(option);
            }
        }

        function updateTargetLanguages() {
            const targetType = document.getElementById('targetType').value;
            const targetLanguage = document.getElementById('targetLanguage');
            const languages = targetType === 'African' ? AFRICAN_LANGUAGES : OTHER_LANGUAGES;
            
            targetLanguage.innerHTML = '';
            for (const [code, name] of Object.entries(languages)) {
                const option = document.createElement('option');
                option.value = code;
                option.textContent = name;
                targetLanguage.appendChild(option);
            }
        }

        // Recording functionality
        async function toggleRecording() {
            if (!isRecording) {
                await startRecording();
            } else {
                stopRecording();
            }
        }

        async function startRecording() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ 
                    audio: {
                        echoCancellation: true,
                        noiseSuppression: true,
                        sampleRate: 44100
                    } 
                });
                
                mediaRecorder = new MediaRecorder(stream, {
                    mimeType: 'audio/webm;codecs=opus'
                });
                audioChunks = [];

                mediaRecorder.ondataavailable = (event) => {
                    if (event.data.size > 0) {
                        audioChunks.push(event.data);
                    }
                };

                mediaRecorder.onstop = () => {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                    processAudio(audioBlob);
                    
                    // Stop all tracks to release microphone
                    stream.getTracks().forEach(track => track.stop());
                };

                mediaRecorder.start();
                isRecording = true;
                
                const recordButton = document.getElementById('recordButton');
                recordButton.textContent = 'Stop Recording';
                recordButton.classList.add('recording');
                
                updateStatus('Recording...', 'recording');
                hideMessages();

                // Auto-stop after timeout
                const timeout = parseInt(document.getElementById('timeout').value) * 1000;
                setTimeout(() => {
                    if (isRecording) {
                        stopRecording();
                    }
                }, timeout);

            } catch (error) {
                showError('Microphone access denied or unavailable. Please allow microphone access and try again.');
                console.error('Error accessing microphone:', error);
                updateStatus('Microphone Error', 'error');
            }
        }

        function stopRecording() {
            if (mediaRecorder && isRecording) {
                mediaRecorder.stop();
                isRecording = false;
                
                const recordButton = document.getElementById('recordButton');
                recordButton.textContent = 'Start Recording';
                recordButton.classList.remove('recording');
                
                updateStatus('Processing...', 'processing');
                showLoading(true);
            }
        }

        async function processAudio(audioBlob) {
            try {
                const formData = new FormData();
                formData.append('audio', audioBlob, 'recording.webm');
                formData.append('source_lang', document.getElementById('sourceLanguage').value);
                formData.append('target_lang', document.getElementById('targetLanguage').value);
                formData.append('source_type', document.getElementById('sourceType').value);
                formData.append('target_type', document.getElementById('targetType').value);
                formData.append('timeout', document.getElementById('timeout').value);
                formData.append('phrase_limit', document.getElementById('phraseLimit').value);

                const response = await fetch('/translate', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`Server error: ${response.status} ${response.statusText}`);
                }

                const result = await response.json();
                
                if (result.success) {
                    currentTranslationData = result.data;
                    displayResults(result.data);
                    showSuccess('Translation completed successfully!');
                    updateStatus('Ready', 'ready');
                } else {
                    showError(result.error || 'Translation failed. Please try again.');
                    updateStatus('Error', 'error');
                }

            } catch (error) {
                let errorMessage = 'Network error: Unable to process translation. ';
                
                if (error.message.includes('Failed to fetch')) {
                    errorMessage += 'Please check if the server is running.';
                } else {
                    errorMessage += error.message;
                }
                
                showError(errorMessage);
                updateStatus('Error', 'error');
                console.error('Processing error:', error);
            } finally {
                showLoading(false);
            }
        }

        function displayResults(data) {
            const resultsContainer = document.getElementById('resultsContainer');
            const audioControls = document.getElementById('audioControls');
            
            // Get language names for display
            const sourceLangName = getLanguageName(data.source_lang, data.source_type);
            const targetLangName = getLanguageName(data.target_lang, data.target_type);
            
            resultsContainer.innerHTML = `
                <div class="result-item">
                    <div class="result-label">Original Text (${sourceLangName}):</div>
                    <div class="result-text">${data.original_text}</div>
                </div>
                <div class="result-item">
                    <div class="result-label">Translated Text (${targetLangName}):</div>
                    <div class="result-text">${data.translated_text}</div>
                </div>
                <div class="result-item">
                    <div class="result-label">Translation Method:</div>
                    <div class="result-text">${data.translation_method || 'Standard'}</div>
                </div>
            `;

            // Show audio controls if audio is available
            if (data.audio_available) {
                audioControls.style.display = 'flex';
            } else {
                audioControls.style.display = 'none';
            }
        }

        function getLanguageName(langCode, langType) {
            const languages = langType === 'African' ? AFRICAN_LANGUAGES : OTHER_LANGUAGES;
            return languages[langCode] || langCode;
        }

        async function playTranslatedAudio() {
            try {
                const playButton = document.getElementById('playButton');
                playButton.disabled = true;
                playButton.textContent = 'Loading...';

                const response = await fetch('/get_audio', {
                    method: 'GET'
                });

                if (response.ok) {
                    const audioBlob = await response.blob();
                    const audioUrl = URL.createObjectURL(audioBlob);
                    const audio = new Audio(audioUrl);
                    
                    audio.onended = () => {
                        URL.revokeObjectURL(audioUrl);
                        playButton.disabled = false;
                        playButton.textContent = 'Play Translation';
                    };
                    
                    audio.onerror = () => {
                        URL.revokeObjectURL(audioUrl);
                        showError('Failed to play audio');
                        playButton.disabled = false;
                        playButton.textContent = 'Play Translation';
                    };
                    
                    await audio.play();
                    playButton.textContent = 'Playing...';
                    
                } else {
                    showError('Audio not available');
                    playButton.disabled = false;
                    playButton.textContent = 'Play Translation';
                }
            } catch (error) {
                showError('Failed to fetch audio');
                console.error('Audio fetch error:', error);
                const playButton = document.getElementById('playButton');
                playButton.disabled = false;
                playButton.textContent = 'Play Translation';
            }
        }

        async function downloadAudio() {
            try {
                const downloadButton = document.getElementById('downloadButton');
                downloadButton.disabled = true;
                downloadButton.textContent = 'Downloading...';

                const response = await fetch('/get_audio', {
                    method: 'GET'
                });

                if (response.ok) {
                    const audioBlob = await response.blob();
                    const audioUrl = URL.createObjectURL(audioBlob);
                    
                    const a = document.createElement('a');
                    a.href = audioUrl;
                    a.download = 'translation.mp3';
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    
                    URL.revokeObjectURL(audioUrl);
                    showSuccess('Audio download started');
                } else {
                    showError('Audio not available for download');
                }
            } catch (error) {
                showError('Failed to download audio');
                console.error('Audio download error:', error);
            } finally {
                const downloadButton = document.getElementById('downloadButton');
                downloadButton.disabled = false;
                downloadButton.textContent = 'Download Audio';
            }
        }

        // Utility functions
        function updateStatus(text, type) {
            const statusText = document.getElementById('statusText');
            const statusDot = document.getElementById('statusDot');
            
            statusText.textContent = text;
            statusDot.className = 'status-dot';
            
            switch(type) {
                case 'ready':
                    statusDot.classList.add('status-online');
                    break;
                case 'recording':
                    statusDot.classList.add('status-online');
                    break;
                case 'processing':
                    statusDot.classList.add('status-processing');
                    break;
                case 'error':
                    statusDot.classList.add('status-offline');
                    break;
            }
        }

        function showLoading(show) {
            const spinner = document.getElementById('loadingSpinner');
            const recordButton = document.getElementById('recordButton');
            
            spinner.style.display = show ? 'block' : 'none';
            recordButton.disabled = show;
        }

        function showError(message) {
            const errorDiv = document.getElementById('errorMessage');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
            
            setTimeout(() => {
                errorDiv.style.display = 'none';
            }, 8000);
        }

        function showSuccess(message) {
            const successDiv = document.getElementById('successMessage');
            successDiv.textContent = message;
            successDiv.style.display = 'block';
            
            setTimeout(() => {
                successDiv.style.display = 'none';
            }, 4000);
        }

        function hideMessages() {
            document.getElementById('errorMessage').style.display = 'none';
            document.getElementById('successMessage').style.display = 'none';
        }

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize language dropdowns
            updateSourceLanguages();
            updateTargetLanguages();
            
            // Check if browser supports required APIs
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                showError('Your browser does not support audio recording. Please use a modern browser.');
                document.getElementById('recordButton').disabled = true;
                updateStatus('Browser not supported', 'error');
                return;
            }

            // Check MediaRecorder support
            if (!window.MediaRecorder) {
                showError('Your browser does not support audio recording. Please update your browser.');
                document.getElementById('recordButton').disabled = true;
                updateStatus('Browser not supported', 'error');
                return;
            }

            // Test microphone access on first interaction
            document.getElementById('recordButton').addEventListener('click', async function() {
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                    stream.getTracks().forEach(track => track.stop());
                } catch (error) {
                    if (error.name === 'NotAllowedError') {
                        showError('Microphone access denied. Please allow microphone access in your browser settings.');
                    } else if (error.name === 'NotFoundError') {
                        showError('No microphone found. Please connect a microphone and try again.');
                    } else {
                        showError('Error accessing microphone: ' + error.message);
                    }
                    updateStatus('Microphone Error', 'error');
                }
            }, { once: true });

            updateStatus('Ready', 'ready');
        });
    </script>
</body>
</html>